service:
  name: steam-game-library

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x
  logs:
    restApi: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: serverless
  tracing:
    lambda: true
    apiGateway: true
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  environment:
    SGL_TABLE: SGL-925822673-${self:provider.stage}
    SGL_INDEX: SGLIndex
    APP_TABLE: GMT-925822673-${self:provider.stage}
    APP_INDEX: AppIndex
    SGL_S3_BUCKET: sgl-925822673-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  topicName: imagesTopic-${self:provider.stage}
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Steam Game Library API
        description: Serverless application for Steam Game Library Management
    models:
      - name: CreateGameRequest
        contentType: application/json
        schema: ${file(models/create-game-request.json)}
      - name: UpdateGameRequest
        contentType: application/json
        schema: ${file(models/update-game-request.json)}
      - name: SearchGameRequest
        contentType: application/json
        schema: ${file(models/search-game-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetGames:
    handler: src/lambda/http/getGames.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: games
          cors: true
          documentation:
            summary: List all games for the current user
            description: List games
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}/index/${self:provider.environment.SGL_INDEX}
  
  SearchGames:
    handler: src/lambda/http/searchSteamGames.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: games/search
          cors: true
          documentation:
            summary: FetchGameUsingSteamAPi
            description: List FetchGameUsingSteamAPi
            requestModels:
              'application/json': SearchGameRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_TABLE}/index/${self:provider.environment.APP_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_TABLE}
  FetchGameFromSteam:
    handler: src/lambda/http/fetchSteamGames.handler
    timeout: 900
    events:
      - http:
          method: get
          authorizer: Auth
          path: games/fetch
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_TABLE}/index/${self:provider.environment.APP_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_TABLE}


  CreateGame:
    handler: src/lambda/http/createGame.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: games
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Game
            description: Create a new Game
            requestModels:
              'application/json': CreateGameRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}

  UpdateGame:
    handler: src/lambda/http/updateGame.handler
    events:
      - http:
          method: patch
          authorizer: Auth
          path: games/{gameId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Set a game as wishlisted
            description: Set a game as wishlisted
            requestModels:
              'application/json': UpdateGameRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}/index/${self:provider.environment.SGL_INDEX}


  DeleteGame:
    handler: src/lambda/http/deleteGame.handler
    events:
      - http:
          method: delete
          authorizer: Auth
          path: games/{gameId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}/index/${self:provider.environment.SGL_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.SGL_S3_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: games/{gameId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}/index/${self:provider.environment.SGL_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.SGL_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SGL_TABLE}

  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt GamesSearch.DomainEndpoint
    handler: src/lambda/dynamoDB/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt GamesTable.StreamArn

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.SGL_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SGL_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: gameId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    GamesDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: appid
            AttributeType: N
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: appid
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.APP_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.SGL_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.SGL_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    GamesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: games-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'